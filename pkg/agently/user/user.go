package user

import (
	"context"
	"embed"
	"fmt"
	"github.com/viant/datly"
	"github.com/viant/datly/repository"
	"github.com/viant/datly/repository/contract"
	"github.com/viant/datly/view"
	"github.com/viant/xdatly/handler/response"
	"github.com/viant/xdatly/types/core"
	"github.com/viant/xdatly/types/custom/dependency/checksum"
	"reflect"
	"time"
)

// Code generated by datly. DO NOT EDIT.
// This file was automatically generated and should not be modified manually.

func init() {
	core.RegisterType("user", "UserInput", reflect.TypeOf(UserInput{}), checksum.GeneratedTime)
	core.RegisterType("user", "UserOutput", reflect.TypeOf(UserOutput{}), checksum.GeneratedTime)
}

//go:embed user/*.sql
var UserFS embed.FS

type UserInput struct {
	Id  string        `parameter:",kind=query,in=id" predicate:"equal,group=0,t,id"`
	Has *UserInputHas `setMarker:"true" format:"-" sqlx:"-" diff:"-" json:"-"`
}

type UserInputHas struct {
	Id bool
}

type UserOutput struct {
	response.Status `parameter:",kind=output,in=status" json:",omitempty"`
	Data            []*UserView      `parameter:",kind=output,in=view" view:"user,batch=10000,relationalConcurrency=1" sql:"uri=user/user.sql"`
	Metrics         response.Metrics `parameter:",kind=output,in=metrics"`
}

type UserView struct {
	Id                 string     `sqlx:"id"`
	Username           string     `sqlx:"username"`
	DisplayName        *string    `sqlx:"display_name"`
	Email              *string    `sqlx:"email"`
	Provider           string     `sqlx:"provider"`
	Subject            *string    `sqlx:"subject"`
	HashIp             *string    `sqlx:"hash_ip"`
	Timezone           string     `sqlx:"timezone"`
	DefaultAgentRef    *string    `sqlx:"default_agent_ref"`
	DefaultModelRef    *string    `sqlx:"default_model_ref"`
	DefaultEmbedderRef *string    `sqlx:"default_embedder_ref"`
	Settings           *string    `sqlx:"settings"`
	Disabled           int        `sqlx:"disabled"`
	CreatedAt          time.Time  `sqlx:"created_at"`
	UpdatedAt          *time.Time `sqlx:"updated_at"`
}

var UserPathURI = "/v1/api/agently/user"

func DefineUserComponent(ctx context.Context, srv *datly.Service) error {
	aComponent, err := repository.NewComponent(
		contract.NewPath("GET", UserPathURI),
		repository.WithResource(srv.Resource()),
		repository.WithContract(
			reflect.TypeOf(UserInput{}),
			reflect.TypeOf(UserOutput{}), &UserFS, view.WithConnectorRef("agently")))

	if err != nil {
		return fmt.Errorf("failed to create User component: %w", err)
	}
	if err := srv.AddComponent(ctx, aComponent); err != nil {
		return fmt.Errorf("failed to add User component: %w", err)
	}
	return nil
}

func (i *UserInput) EmbedFS() *embed.FS {
	return &UserFS
}
