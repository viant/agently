package oauth

import (
	"context"
	"embed"
	"fmt"
	"github.com/viant/datly"
	"github.com/viant/datly/repository"
	"github.com/viant/datly/repository/contract"
	"github.com/viant/datly/view"
	"github.com/viant/xdatly/handler/response"
	"github.com/viant/xdatly/types/core"
	"github.com/viant/xdatly/types/custom/dependency/checksum"
	"reflect"
	"time"
)

// Code generated by datly. DO NOT EDIT.
// This file was automatically generated and should not be modified manually.

func init() {
	core.RegisterType("oauth", "TokenInput", reflect.TypeOf(TokenInput{}), checksum.GeneratedTime)
	core.RegisterType("oauth", "TokenOutput", reflect.TypeOf(TokenOutput{}), checksum.GeneratedTime)
}

//go:embed token/*.sql
var TokenFS embed.FS

type TokenInput struct {
	Id  string         `parameter:",kind=query,in=user_id" predicate:"equal,group=0,t,user_id"`
	Has *TokenInputHas `setMarker:"true" format:"-" sqlx:"-" diff:"-" json:"-"`
}

type TokenInputHas struct {
	Id bool
}

type TokenOutput struct {
	response.Status `parameter:",kind=output,in=status" json:",omitempty"`
	Data            []*TokenView     `parameter:",kind=output,in=view" view:"token,batch=10000,relationalConcurrency=1" sql:"uri=token/token.sql"`
	Metrics         response.Metrics `parameter:",kind=output,in=metrics"`
}

type TokenView struct {
	UserId    string     `sqlx:"user_id"`
	Provider  string     `sqlx:"provider"`
	EncToken  string     `sqlx:"enc_token"`
	CreatedAt time.Time  `sqlx:"created_at"`
	UpdatedAt *time.Time `sqlx:"updated_at"`
}

var TokenPathURI = "/v1/api/agently/user/oauth"

func DefineTokenComponent(ctx context.Context, srv *datly.Service) error {
	aComponent, err := repository.NewComponent(
		contract.NewPath("GET", TokenPathURI),
		repository.WithResource(srv.Resource()),
		repository.WithContract(
			reflect.TypeOf(TokenInput{}),
			reflect.TypeOf(TokenOutput{}), &TokenFS, view.WithConnectorRef("agently")))

	if err != nil {
		return fmt.Errorf("failed to create Token component: %w", err)
	}
	if err := srv.AddComponent(ctx, aComponent); err != nil {
		return fmt.Errorf("failed to add Token component: %w", err)
	}
	return nil
}

	func (i *TokenInput) EmbedFS() *embed.FS {
		return &TokenFS
	}