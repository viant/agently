package run

import (
	"context"
	"embed"
	"fmt"
	"github.com/viant/datly"
	"github.com/viant/datly/repository"
	"github.com/viant/datly/repository/contract"
	"github.com/viant/datly/view"
	"github.com/viant/xdatly/handler/response"
	"github.com/viant/xdatly/types/core"
	"github.com/viant/xdatly/types/custom/dependency/checksum"
	"reflect"
	"time"
)

// Code generated by datly. DO NOT EDIT.
// This file was automatically generated and should not be modified manually.

func init() {
	core.RegisterType("run", "RunInput", reflect.TypeOf(RunInput{}), checksum.GeneratedTime)
	core.RegisterType("run", "RunOutput", reflect.TypeOf(RunOutput{}), checksum.GeneratedTime)
}

//go:embed run/*.sql
var RunFS embed.FS

type RunInput struct {
	Id    string       `parameter:",kind=path,in=id" predicate:"equal,group=0,t,id"`
	Since string       `parameter:",kind=query,in=since" predicate:"expr,group=1,created_at >= (SELECT created_at FROM turn WHERE id = ?)"`
	Has   *RunInputHas `setMarker:"true" format:"-" sqlx:"-" diff:"-" json:"-"`
}

type RunInputHas struct {
	Id    bool
	Since bool
}

type RunOutput struct {
	response.Status `parameter:",kind=output,in=status" json:",omitempty"`
	Data            []*RunView       `parameter:",kind=output,in=view" view:"run,batch=10000,relationalConcurrency=1" sql:"uri=run/run.sql"`
	Metrics         response.Metrics `parameter:",kind=output,in=metrics"`
}

type RunView struct {
	Id                 string     `sqlx:"id"`
	ScheduleId         string     `sqlx:"schedule_id"`
	CreatedAt          time.Time  `sqlx:"created_at"`
	Status             string     `sqlx:"status"`
	ErrorMessage       *string    `sqlx:"error_message"`
	PreconditionRanAt  *time.Time `sqlx:"precondition_ran_at"`
	PreconditionPassed *int       `sqlx:"precondition_passed"`
	PreconditionResult *string    `sqlx:"precondition_result"`
	ConversationId     *string    `sqlx:"conversation_id"`
	ConversationKind   string     `sqlx:"conversation_kind"`
	StartedAt          *time.Time `sqlx:"started_at"`
	CompletedAt        *time.Time `sqlx:"completed_at"`
}

var RunPathURI = "/v1/api/agently/scheduler/run/{id}"

func DefineRunComponent(ctx context.Context, srv *datly.Service) error {
	aComponent, err := repository.NewComponent(
		contract.NewPath("GET", RunPathURI),
		repository.WithResource(srv.Resource()),
		repository.WithContract(
			reflect.TypeOf(RunInput{}),
			reflect.TypeOf(RunOutput{}), &RunFS, view.WithConnectorRef("agently")))

	if err != nil {
		return fmt.Errorf("failed to create Run component: %w", err)
	}
	if err := srv.AddComponent(ctx, aComponent); err != nil {
		return fmt.Errorf("failed to add Run component: %w", err)
	}
	return nil
}

func (i *RunInput) EmbedFS() *embed.FS {
	return &RunFS
}
