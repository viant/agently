package schedule

import (
	"context"
	"embed"
	"fmt"
	"github.com/viant/datly"
	"github.com/viant/datly/repository"
	"github.com/viant/datly/repository/contract"
	"github.com/viant/datly/view"
	"github.com/viant/xdatly/handler/response"
	"github.com/viant/xdatly/types/core"
	"github.com/viant/xdatly/types/custom/dependency/checksum"
	"reflect"
	"time"
)

// Code generated by datly. DO NOT EDIT.
// This file was automatically generated and should not be modified manually.

func init() {
	core.RegisterType("schedule", "ScheduleInput", reflect.TypeOf(ScheduleInput{}), checksum.GeneratedTime)
	core.RegisterType("schedule", "ScheduleOutput", reflect.TypeOf(ScheduleOutput{}), checksum.GeneratedTime)
}

//go:embed schedule/*.sql
var ScheduleFS embed.FS

type ScheduleInput struct {
	Id  string            `parameter:",kind=path,in=id" predicate:"equal,group=0,t,id"`
	Has *ScheduleInputHas `setMarker:"true" format:"-" sqlx:"-" diff:"-" json:"-"`
}

type ScheduleInputHas struct {
	Id bool
}

type ScheduleOutput struct {
	response.Status `parameter:",kind=output,in=status" json:",omitempty"`
	Data            []*ScheduleView  `parameter:",kind=output,in=view" view:"schedule,batch=10000,relationalConcurrency=1" sql:"uri=schedule/schedule.sql"`
	Metrics         response.Metrics `parameter:",kind=output,in=metrics"`
}

type ScheduleView struct {
	AgentRef        string     `sqlx:"agent_ref"`
	CreatedAt       time.Time  `sqlx:"created_at"`
	CronExpr        *string    `sqlx:"cron_expr"`
	Description     *string    `sqlx:"description"`
	Enabled         bool       `sqlx:"enabled"`
	EndAt           *time.Time `sqlx:"end_at"`
	Id              string     `sqlx:"id"`
	IntervalSeconds *int       `sqlx:"interval_seconds"`
	LastError       *string    `sqlx:"last_error"`
	LastRunAt       *time.Time `sqlx:"last_run_at"`
	LastStatus      *string    `sqlx:"last_status"`
	ModelOverride   *string    `sqlx:"model_override"`
	Name            string     `sqlx:"name"`
	NextRunAt       *time.Time `sqlx:"next_run_at"`
	ScheduleType    string     `sqlx:"schedule_type"`
	StartAt         *time.Time `sqlx:"start_at"`
	TaskPrompt      *string    `sqlx:"task_prompt"`
	TaskPromptUri   *string    `sqlx:"task_prompt_uri"`
	Timezone        string     `sqlx:"timezone"`
	UpdatedAt       *time.Time `sqlx:"updated_at"`
}

var SchedulePathURI = "/v1/api/agently/scheduler/schedule/{id}"

func DefineScheduleComponent(ctx context.Context, srv *datly.Service) error {
	aComponent, err := repository.NewComponent(
		contract.NewPath("GET", SchedulePathURI),
		repository.WithResource(srv.Resource()),
		repository.WithContract(
			reflect.TypeOf(ScheduleInput{}),
			reflect.TypeOf(ScheduleOutput{}), &ScheduleFS, view.WithConnectorRef("agently")))

	if err != nil {
		return fmt.Errorf("failed to create Schedule component: %w", err)
	}
	if err := srv.AddComponent(ctx, aComponent); err != nil {
		return fmt.Errorf("failed to add Schedule component: %w", err)
	}
	return nil
}

func (i *ScheduleInput) EmbedFS() *embed.FS {
	return &ScheduleFS
}
