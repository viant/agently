package core

import (
	"context"
	_ "embed"
	plan2 "github.com/viant/agently/genai/agent/plan"
)

// Plan represents a structured Plan generated by the LLM.
//
//go:embed prompt/plan_prompt.vm
var planPromptTemplate string

// PlanInput defines input for Plan generation or finalization.
type PlanInput struct {
	Query          string         `json:"query"`
	Context        string         `json:"context,omitempty"`
	Results        []plan2.Result `json:"results,omitempty"` // structured step results for finalization
	Model          string         `json:"model,omitempty"`
	Tools          []string       `json:"tools,omitempty"`          // available tools for selection
	PromptTemplate string         `json:"promptTemplate,omitempty"` // optional custom prompt for Plan generation
}

// PlanOutput defines Plan or Answer output.
type PlanOutput struct {
	Plan   *plan2.Plan `json:"plan"`
	Answer string      `json:"answer,omitempty"`
}

// Plan calls the LLM to generate a YAML-encoded Plan
func (s *Service) plan(ctx context.Context, in, out interface{}) error {
	input := in.(*PlanInput)
	output := out.(*PlanOutput)
	return s.Plan(ctx, input, output)
}

// Plan generates a structured Plan based on the provided input.
func (s *Service) Plan(ctx context.Context, input *PlanInput, output *PlanOutput) error {
	modelName := input.Model
	if modelName == "" {
		modelName = s.defaultModel
	}
	tools, err := s.registry.MustHaveTools(input.Tools)
	if err != nil {
		return err
	}

	promptTemplate := input.PromptTemplate
	if promptTemplate == "" {
		promptTemplate = planPromptTemplate
	}

	// Build GenerateInput using the runner service with Velty template binding.
	genInput := &GenerateInput{
		Model:    modelName,
		Template: planPromptTemplate,
		Bind: map[string]interface{}{
			"Query":   input.Query,
			"Context": input.Context,
			"Results": input.Results,
			"Tools":   input.Tools,
		},
		Tools: tools,
	}
	genOuput := &GenerateOutput{}
	if err = s.Generate(ctx, genInput, genOuput); err != nil {
		return err
	}
	var aPlan plan2.Plan
	if err = EnsureJSONResponse(ctx, genOuput.Content, &aPlan); err == nil {
		output.Plan = &aPlan
		return nil
	}
	output.Answer = genOuput.Content
	return nil
}
