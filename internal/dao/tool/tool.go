package tool

import (
	"context"
	"embed"
	"fmt"
	"github.com/viant/datly"
	"github.com/viant/datly/repository"
	"github.com/viant/datly/repository/contract"
	"github.com/viant/datly/view"
	"github.com/viant/xdatly/handler/response"
	"reflect"
	"time"
)

// Code generated by datly. DO NOT EDIT.
// This file was automatically generated and should not be modified manually.



//go:embed tool_call/*.sql
var ToolCallFS embed.FS

type ToolCallInput struct {
	ConversationId string            `parameter:",kind=query,in=summary" predicate:"contains,group=0,t,conversation_id"`
	Id             []int             `parameter:",kind=query,in=id" predicate:"in,group=0,t,id"`
	Has            *ToolCallInputHas `setMarker:"true" format:"-" sqlx:"-" diff:"-" json:"-"`
}

type ToolCallInputHas struct {
	ConversationId bool
	Id             bool
}

type ToolCallOutput struct {
	Metrics         response.Metrics `parameter:",kind=output,in=metrics"`
	response.Status `parameter:",kind=output,in=status" json:",omitempty"`
	Data            []*ToolCallView `parameter:",kind=output,in=view" view:"tool_call,batch=10000,relationalConcurrency=1" sql:"uri=tool_call/tool_call.sql"`
}

type ToolCallView struct {
	Id             int        `sqlx:"id"`
	ConversationId string     `sqlx:"conversation_id"`
	ToolName       string     `sqlx:"tool_name"`
	Arguments      *string    `sqlx:"arguments"`
	Result         *string    `sqlx:"result"`
	Succeeded      *bool      `sqlx:"succeeded"`
	ErrorMsg       *string    `sqlx:"error_msg"`
	StartedAt      *time.Time `sqlx:"started_at"`
	FinishedAt     *time.Time `sqlx:"finished_at"`
}

var ToolCallPathURI = "/v1/api/agently/tool"

func DefineToolCallComponent(ctx context.Context, srv *datly.Service) error {
	aComponent, err := repository.NewComponent(
		contract.NewPath("GET", ToolCallPathURI),
		repository.WithResource(srv.Resource()),
		repository.WithContract(
			reflect.TypeOf(ToolCallInput{}),
			reflect.TypeOf(ToolCallOutput{}), &ToolCallFS, view.WithConnectorRef("agently")))

	if err != nil {
		return fmt.Errorf("failed to create ToolCall component: %w", err)
	}
	if err := srv.AddComponent(ctx, aComponent); err != nil {
		return fmt.Errorf("failed to add ToolCall component: %w", err)
	}
	return nil
}

	func (i *ToolCallInput) EmbedFS() *embed.FS {
		return &ToolCallFS
	}