package conversation

import (
	"context"
	"embed"
	"fmt"
	"github.com/viant/datly"
	"github.com/viant/datly/repository"
	"github.com/viant/datly/repository/contract"
	"github.com/viant/datly/view"
	"github.com/viant/xdatly/handler/response"
	"reflect"
	"time"
)

// Code generated by datly. DO NOT EDIT.
// This file was automatically generated and should not be modified manually.

//go:embed message/*.sql
var MessageFS embed.FS

type MessageInput struct {
	ConvId string           `parameter:",kind=path,in=conversationId" predicate:"in,group=0,m,conversation_id"`
	Id     string           `parameter:",kind=path,in=id,uri=/{id}" predicate:"in,group=0,m,id"`
	Has    *MessageInputHas `setMarker:"true" format:"-" sqlx:"-" diff:"-" json:"-"`
}

type MessageInputHas struct {
	ConvId bool
	Id     bool
}

type MessageOutput struct {
	response.Status `parameter:",kind=output,in=status" json:",omitempty"`
	Data            []*MessageView   `parameter:",kind=output,in=view" view:"message,batch=10000,relationalConcurrency=1" sql:"uri=message/message.sql"`
	Metrics         response.Metrics `parameter:",kind=output,in=metrics"`
}

type MessageView struct {
	Id             string     `sqlx:"id"`
	ConversationId *string    `sqlx:"conversation_id"`
	Role           string     `sqlx:"role"`
	Content        string     `sqlx:"content"`
	ToolName       *string    `sqlx:"tool_name"`
	CreatedAt      *time.Time `sqlx:"created_at"`
}

var MessagePathURI = "/v1/api/agently/conversation/{conversationId}/message"

func DefineMessageComponent(ctx context.Context, srv *datly.Service) error {
	aComponent, err := repository.NewComponent(
		contract.NewPath("GET", MessagePathURI),
		repository.WithResource(srv.Resource()),
		repository.WithContract(
			reflect.TypeOf(MessageInput{}),
			reflect.TypeOf(MessageOutput{}), &MessageFS, view.WithConnectorRef("agently")))

	if err != nil {
		return fmt.Errorf("failed to create Message component: %w", err)
	}
	if err := srv.AddComponent(ctx, aComponent); err != nil {
		return fmt.Errorf("failed to add Message component: %w", err)
	}
	return nil
}

	func (i *MessageInput) EmbedFS() *embed.FS {
		return &MessageFS
	}