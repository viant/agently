package conversation

import (
	"context"
	"embed"
	"fmt"
	"github.com/viant/datly"
	"github.com/viant/datly/repository"
	"github.com/viant/datly/repository/contract"
	"github.com/viant/datly/view"
	"github.com/viant/xdatly/handler/response"
	"reflect"
	"time"
)

// Code generated by datly. DO NOT EDIT.
// This file was automatically generated and should not be modified manually.

//go:embed conversation/*.sql
var ConversationFS embed.FS

type ConversationInput struct {
	Summary string                `parameter:",kind=query,in=summary" predicate:"contains,group=0,c,summary"`
	Id      string                `parameter:",kind=path,in=id" predicate:"in,group=0,c,id"`
	Has     *ConversationInputHas `setMarker:"true" format:"-" sqlx:"-" diff:"-" json:"-"`
}

type ConversationInputHas struct {
	Summary bool
	Id      bool
}

type ConversationOutput struct {
	response.Status `parameter:",kind=output,in=status" json:",omitempty"`
	Data            []*ConversationView `parameter:",kind=output,in=view" view:"conversation,batch=10000,relationalConcurrency=1" sql:"uri=conversation/conversation.sql"`
}

type ConversationView struct {
	Id                   string     `sqlx:"id"`
	Summary              *string    `sqlx:"summary"`
	AgentName            *string    `sqlx:"agent_name"`
	CreatedAt            *time.Time `sqlx:"created_at"`
	LastActivity         *time.Time `sqlx:"last_activity"`
	UsageInputTokens     *int       `sqlx:"usage_input_tokens"`
	UsageOutputTokens    *int       `sqlx:"usage_output_tokens"`
	UsageEmbeddingTokens *int       `sqlx:"usage_embedding_tokens"`
}

var ConversationPathURI = "/v1/api/agently/conversation/{id}"

func DefineConversationComponent(ctx context.Context, srv *datly.Service) error {
	aComponent, err := repository.NewComponent(
		contract.NewPath("GET", ConversationPathURI),
		repository.WithResource(srv.Resource()),
		repository.WithContract(
			reflect.TypeOf(ConversationInput{}),
			reflect.TypeOf(ConversationOutput{}), &ConversationFS, view.WithConnectorRef("agently")))

	if err != nil {
		return fmt.Errorf("failed to create Conversation component: %w", err)
	}
	if err := srv.AddComponent(ctx, aComponent); err != nil {
		return fmt.Errorf("failed to add Conversation component: %w", err)
	}
	return nil
}

func (i *ConversationInput) EmbedFS() *embed.FS {
	return &ConversationFS
}
